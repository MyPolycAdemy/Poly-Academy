# Generated by Django 5.1.3 on 2024-11-20 14:26

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CourseModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cover', models.ImageField(blank=True, null=True, upload_to='course_covers/')),
                ('course_name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('category', models.CharField(max_length=100)),
                ('level', models.CharField(max_length=100)),
                ('bullet_points', models.JSONField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='VideoModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Título del video', max_length=200)),
                ('instructions', models.TextField(help_text='Instrucciones sobre el contenido del video')),
                ('video_file', models.FileField(blank=True, help_text='Archivo de video', null=True, upload_to='videos/')),
                ('script', models.TextField(help_text='Transcripción de lo que se dice en el video')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='ClassModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('img_cover', models.ImageField(blank=True, null=True, upload_to='course_covers/')),
                ('lesson_name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('bullet_points', models.JSONField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='dashboard.coursemodel')),
            ],
        ),
        migrations.CreateModel(
            name='LayoutModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('instructions', models.TextField()),
                ('img_cover', models.ImageField(blank=True, null=True, upload_to='course_covers/')),
                ('audio', models.FileField(blank=True, null=True, upload_to='lesson_audio/')),
                ('audio_script', models.TextField()),
                ('class_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='layouts', to='dashboard.classmodel')),
            ],
        ),
        migrations.CreateModel(
            name='TextBlockModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Título del bloque de texto', max_length=200)),
                ('instructions', models.TextField(help_text='Instrucciones para el bloque de texto')),
                ('content', models.TextField(help_text='Contenido de texto')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='text_blocks', to='dashboard.classmodel')),
            ],
        ),
        migrations.CreateModel(
            name='FillInTheGapsTaskModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('instructions', models.TextField(help_text='Instrucciones para la tarea de llenar los espacios.')),
                ('text_with_gaps', models.TextField(help_text="Texto con espacios para completar. Usa '{gap}' para indicar los espacios.")),
                ('keywords', models.JSONField(help_text='Palabras claves en formato JSON, en el orden de aparición de los espacios.')),
                ('order', models.PositiveIntegerField(default=0, help_text='Orden de aparición de la tarea.')),
                ('layout', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fill_in_the_gaps_tasks', to='dashboard.layoutmodel')),
            ],
            options={
                'ordering': ['order'],
                'unique_together': {('layout', 'order')},
            },
        ),
        migrations.CreateModel(
            name='CategoriesTaskModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('instructions', models.TextField()),
                ('categories', models.JSONField()),
                ('order', models.PositiveIntegerField(default=0, help_text='Orden de aparición de la tarea.')),
                ('layout', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='categories_tasks', to='dashboard.layoutmodel')),
            ],
            options={
                'ordering': ['order'],
                'unique_together': {('layout', 'order')},
            },
        ),
        migrations.CreateModel(
            name='MultipleChoiceModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('instructions', models.TextField()),
                ('question', models.CharField(max_length=200)),
                ('answers', models.JSONField(help_text="Formato: [{'text': 'respuesta', 'is_correct': true/false}, ...]")),
                ('order', models.PositiveIntegerField(default=0)),
                ('layout', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='dashboard.layoutmodel')),
            ],
            options={
                'ordering': ['order'],
                'unique_together': {('layout', 'order')},
            },
        ),
        migrations.CreateModel(
            name='OrderingTaskModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('instructions', models.TextField()),
                ('items', models.JSONField(help_text='Lista de elementos a ordenar en formato JSON.')),
                ('order', models.PositiveIntegerField(default=0, help_text='Orden de aparición de la tarea.')),
                ('layout', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ordering_tasks', to='dashboard.layoutmodel')),
            ],
            options={
                'ordering': ['order'],
                'unique_together': {('layout', 'order')},
            },
        ),
        migrations.CreateModel(
            name='TrueOrFalseModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('instructions', models.TextField()),
                ('questions', models.JSONField()),
                ('order', models.PositiveIntegerField(default=0, help_text='Orden de aparición de la tarea.')),
                ('layout', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='true_or_false_tasks', to='dashboard.layoutmodel')),
            ],
            options={
                'ordering': ['order'],
                'unique_together': {('layout', 'order')},
            },
        ),
    ]
